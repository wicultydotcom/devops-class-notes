		Docker - The Container Virtualisation Tool
	     ==================================================
Day-1:
###############
#
Diff between..
- Physical server
- Virtual machine
- Docker container

VM, Docker, usage in DevOps.

#
what is docker? why docker?


#
Supported Platforms -
	- Docker is supported on
		- Linux platforms
			Ubuntu, RHEL, CentOs ..etc.
*		- Windows  
		- OS X 		
		  
	- Cloud Platforms
		Amazon EC2
		Rackspace Cloud
		Google compute Engine..etc.
		Azure

Note:
Linux containers can be created on Windows and OS X.
HOW?- Windows & Mac Docker installers contain a tiny Linux virtual machine.
So, Docker creates linux container on top of this tiny Linux VM.

Requirements:
	- 64-bit architecture	  
	- Linux 3.8 or later Kernel versions

#
Requirements Check:
- Check Kernel version
	$ uname -a
	$ uname -r

- Check OS name:
	$ lsb_release -a / -cs
	$ cat /etc/os-release	


Installation Steps:
=====================	
# To install the Docker, Run below commands
Reference: https://docs.docker.com/engine/install/ubuntu

        $ curl -fsSL https://get.docker.com -o get-docker.sh
	$ chmod +x get-docker.sh
        $ ./get-docker.sh

#
Installation Check
sudo docker version

#
If you would like to use Docker as a non-root user, you should add your user to the “docker” group with below command.

  sudo usermod -aG docker <your-user>
  
check if the user is added to the group
$ cat /etc/group | grep docker
docker:x:998:wiculty

Note - restart the machine once the user is added to the group.

#
uninstall docker:
$ sudo apt-get purge docker-ce docker-ce-cli containerd.io


$ sudo rm -rf /var/lib/docker (Removes all containers and images)


DAY-2
#
Managing docker containers
===============================
# Create a new container using below command

$ docker run -it ubuntu /bin/bash


# Inspect the new container.. Let's believe that it's separate machine
1.
	hostname
2.
	cat /etc/hosts

3. hostname -i

5. ps -ef

6. cd / && pwd && ls


# List all containers(stopped and running)
$ docker cotainer ls -a
$ docker ps -a

# List all containers (running & stopped)
  "docker ps -a" command output shows
	- Image name from which container is created
	- ID - container can be identified using short UUID, longer UUID Or name.
	- Status of the container (Up / Exited)
	- Name of the container

# List running containers only
$ sudo docker container ls
$ docker ps

# List given no. of containers
$ docker ps -n1

# show the last container which you have created (stopped/running)
docker container ls -l
Docker ps -l

# List all images in the host machine
	
QN:
---
What is docker Engine


# Remove image from the host machine
docker rmi <image_name>

#
Shotdown a container
"exit" to stop the container

# Deleting a container by giving it's name or ID
$ docker rm ID/name

# Deleting an image by giving it's name or ID
$ docker rmi ID/name


# Login to a stopped container
	$ docker start
	$ docker attach

# You can also Login into a stopped container using below single command
        $ docker start -ai <container_name>

# Shortcut Keys
	Ctrl (press & host)+ p + q - push a running container in background mode.
	Ctrl + d -  short cut to 'stop' a container.


# Naming the container
	docker run --name tomcat-server -it ubuntu /bin/bash

Note: Two containers can't have the same name.

# Rename a container
$ docker rename db-server3 db-server-name3



# SSH setup for containers
By default, containers won't be having SSH installation. But, SSH almost mandatory in order to connect to a remote machine of if remote machine wants to connect to the container. Let's setup SSH in the container.

- Create a new container
$ docker run -it ubuntu /bin/bash [run ssh command. It's missing!]
- Install SSH in the container
$ apt-get update
$ apt-get install ssh [This installs both SSH client and Server]

- Start the SSH server
$ service ssh start (status/stop/restart)

- Create an user and set up password
$ useradd -m -d /home/wiculty -s /bin/bash wiculty
$ passwd wiculty
	
- Connect to the container using below command from the host machine.
$ ssh wiculty@172.17.0.3

**
--> [ putty ]


# List Stopped containers only
$ docker ps -a -f status=exited (Where Status can be exited/running)


# Delete all (running/stoped) containers at once
 $ docker rm -f $(docker container ls -a -q)
 $ docker rm -f $(docker ps -a -q)

# Delete running containers only
$ docker rm -f $(docker container ls -q)
$ docker rm -f $(docker ps -q)


# list stopped containers only
$ docker container ls -a -f status=exited

# Starting a stopped container
	sudo docker start gamut
	sudo docker stop <container-name>
	sudo docker restart gamut


# Run a linux command remotely in a container
$ docker exec -it tomcat-server ps -ef

#
Get an independent terminal from a container remotely (from Host)
$ docker exec -it tomcat-server /bin/bash

#
How do you login into a container with a specific user (other than root)
First create an user (harry) in the container. Make sure container is running and use below command to login as a specific user.
$ docker exec -it --user harry tomcat-server /bin/bash

# Create a container in a background mode / detached mode ( without terminal access ) 
$ docker run -it -d ubuntu /bin/bash


STATS:
==========
# Display usage statistics of a container
	$ docker stats <container-name>
	$ docker stats --no-stream <container-name>
	$ docker stats --no-stream --all

	$ docker stats --no-stream --format {{.MemUsage}} sleepy_shannon
	$ docker stats --no-stream --format {{.CPUPerc}} sleepy_shannon

#
Allocating memory for a container (below command allocates 1 GB RAM)
	$ docker run -it --name tomcat-server -m 1g ubuntu /bin/bash
	$ docker run -it --name tomcat-server -m 512m ubuntu /bin/bash 

#
Updating memory of an existing container 
	$ docker update -m 2048m tomcat-server	
	
# CPU Allocation
$ docker run -it --cpus=2 --name jenkins-server ubuntu /bin/bash
$ docker update --cpus=2 jenkins-server


DAY-4:
# Docker Images
=================
Agenda:
	- Understand docker Images and application containerisation
	- Advantages of Docker Images
	- Create docker Image for your application
	- Share/publish your Image
	- Examine Docker repositories that hold images

- Docker images are the building blocks for creating container
- From images, we launch containers.

# Advantages of Images in Build and Deployments OR DevOps world!

a. Works In my machine problem.
*b. Developers can quickly setup local development environments as we can include all dependencies in the image and create containers.
*c. Is there an Issue? don't spend time to troubleshoot it. Just throw the machine which has the issue away and create new instantly.
d. Auto scale your environment very easily.
e. No need to live with complex, redundant configurations. You can create disposable environments.
f. You can leverage/utilises local machines's computing power when you need to test your code on multiple machines, instead of waiting for DevOps team to supply or wasting extra computing power. you already have 500GB, 16GB RAM right? are you utilising it? NO! then why again you need extra hardware?
g. You can create new environments within few minutes (ex: create new performance testing environment within few minutes before the release)


# Listing docker images
- $ docker image ls

- Images live in '/var/lib/docker/image/overlay2/imagedb/content/sha256'
- Containers live in '/var/lib/docker/containers'


# Building our own Image
	We have 2 Ways to create docker image:
		1. docker "commit"
		2. docker "build" cmd & Dockerfile

# Creating docker image using "docker commit" command
===========================================================
PROJECT-1:
Goal: Create the docker image to ship the application code along with nginx configurations.

- Create container
	$ docker run -it --name Wiculty-container ubuntu /bin/bash
	x
- Install nginx manually
	$ apt-get update
	$ apt-get install -y nginx

- Deploy / copy some application code into '/var/www/html' (this is deployment path for nginx)
	ex: create index.html with below code in '/var/www/html'
=======
<html>
    <body>
	<h1 style="color:red;">Wiculty Learning Solutions</h1>
    </body> 
</html>
=======

- Create docker image from the container (OR)
- Convert docker container as docker image..
	$ docker commit Wiculty-container nageshvkn/wiculty-img
Syntax: $ docker commit <container-name> <image-name>
	
- Check if image has been created
	$ docker image ls

- Push the newly created image to docker hub
        - Create an account in 'https://hub.docker.com/'.
	$ docker login
	$ docker push nageshvkn/nginx-img

Note: Now you have successfully containerised your application and published the iamge to DockerHub. Customers can spin millions of new containers using the above docker image.

Note: To verify your image as an user, create a container as shown below. Remove existing image that you have created so that you can abserve image download from Docker hub clearly. (to remove the image.. $ docker rmi nageshvkn/nginx-img)
	$ docker run -it nageshvkn/wiculty-img /bin/bash

- Launch the application to test if application is configured along with dependencies.
Note: start Nginx server manually using 'service nginx start'
	http://172.17.0.2:80

Note:
start/stop/restart nginx server:
===========\===========\===========		
$ sudo service nginx start
$ sudo service nginx stop
$ sudo service nginx restart
$ sudo service nginx status

Note:
uninstall nginx using below comamnd
$ sudo apt-get purge nginx nginx-common


PROJECT-2:
=============
DAY-6:
# Creating docker image using "docker build" command
=================
	- mkdir wiculty
	- cd wiculty
	- touch Dockerfile

	--> 'wiculty' directory is called "context" or "build context".
		It contains the code, files or other data that you want to include in the 
		image.
	
	- Write Dokckerfile:
		FROM ubuntu:16.04
		MAINTAINER "info@wiculty.com"
		RUN apt-get update
		RUN apt-get install -y nginx
		COPY index.html /var/www/html
		ENTRYPOINT service nginx start && bash

index.html:
=======
<html>
   <body style="background-color:powderblue;">
     <h1 style="color:red;">Wiculty Learning Solutions</h1>
	</body> 
</html>
 	
# Building docker image:
	$ cd wiculty
	$ docker build -t "nageshvkn/wiculty-img" .

Note: Building the image if 'Dockerfile' has different name.
	  Use "-f <YourDockerfileName>" option.
	  Example: $ docker build -f MyDockerfile -t="nageshvkn/wiculty-img" .

# Listing docker image
	$ docker image ls

# Create an account in docker hub

# Pushing custom images to docker repository
	$ docker login
	$ docker push nageshvkn/wiculty-image

#
Testing Image
1. Remove the local image so that it will be downloaded from Docker Hub.
	$ docker rmi nageshvkn/wiculty-image (OR)
	$ docker image rm nageshvkn/wiculty-image
 
2. Creating a new container from our image
	$ docker run -it --name wiculty-container nageshvkn/wiculty-img /bin/bash

Note: start the nginx server manually as it's not fixed yet. It will be fixed in the next topic.

3. Verify if nginx is running from the container.
	$ http://172.17.0.2:80
	

# Images Layers & Build Cache


#
User Images Syntax:
	nageshvkn/wiculty-img (username/imagename)

Official Images Syntax:
	ubuntu

# Specifying Image via tags
	- ubuntu:20.04
	  ubuntu- is image name
	  20.04 - is called tag


# Deleting an Image
	- docker rmi nageshvkn/wiculty-img

# Deleting all Images
	- docker rmi $(docker images -q)


Volumes:
===============
# List all volumes available in host machine
	$ docker volume ls
 
# Create a new Named Volume
	$ docker volume create deployment_code

# Check Mount point directory
	$ docker inspect deployment_code

# Mount Volume(deployment_code) to a new container
	$ docker run -it -v deployment_code:/deployment_code ubuntu:16.04 /bin/bash


# Create 'Read-only' Volumes
	$ docker run -it -v deployment_code:/deployment_code:ro ubuntu:16.04 /bin/bash

# Removing a Volume
	$ docker volume rm deployment_code

# List down all containers which are using a particular volume
	$ docker ps -a --filter volume=deployment_code



# Manual Gamutkart Application Deployment Process

DAY-8:
Gamutkart Real-time application
============================
Agenda:
How do you containerize or dockerize your application?
Can you explain how you have implememnted Docker for your application?


1. Clone the source code from Git or any other V.C.S
	$ git clone https://github.com/nageshvkn/gamutkart2.git
 
2. Build the code using your favourate build tool Maven/ANT
	$ mvn install

3. Create docker image for the application(gamutkart2) with
   war file, tomcat,jdk...etc using below Dockerfile.
	Dockerfile:
	-------------
	FROM ubuntu:16.04 
	MAINTAINER "info@gamutgurus.com"
	RUN apt-get update
	RUN apt-get install -y openjdk-8-jdk
	ENV JAVA_HOME /usr
	ADD apache-tomcat-8.5.38.tar.gz /root
	COPY target/gamutkart.war /root/apache-tomcat-8.5.38/webapps
	ENTRYPOINT /root/apache-tomcat-8.5.38/bin/startup.sh && bash

4. Build the Image using below command
	$ docker build -t "nageshvkn/gamutkart-img" .
	
4A. Push the image to docker hub.
        $ docker push nageshvkn/gamutkart-img

5. Run below shell script to create an environment with give no. containers
	$ ./create-env.sh 10

6. Observer all containers created using above script ($ docker ps)

7. Launch the gamutkart application from all containers.
	$ http://IP:8080/gamutkart


# Images Layers & Build Cache


#
Docker and Jenkins Integration
1. Create a new Free style project in Jenkins
2. Configure Git, Maven, Docker Image creation & Environment creation using below.
        - Configure Git URL under "Source code Management"
        - Provide Maven's 'install' command under build section
        - Open 'Execute shell' and type below commands for creating Image and Environment
                - docker build -t "nageshvkn/gamutkart-img" . (Note: don't forget "." at the                                                                                      end)
                - ./create-env.sh 10


# Container creation process - Deep dive with layers


Qns:
- Multistage builds 
- Docker compose

