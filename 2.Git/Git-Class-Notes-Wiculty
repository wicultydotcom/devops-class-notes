                                        GIT
                                  =================
                                                             
# What is SCM/VCS/RCS. Why we need SCM.
	SCM tool features.
	
--> Refer 'ProGit' for official documentation.


#
Git Architecture
- end-to-end git work-flow


#
GIT Installation (Ubuntu):
$ sudo apt-get update
$ sudo apt-get install git

Verify Installation:
	which git
	git version

GIT Uninstallation:
$ sudo apt-get remove git
	

#
Creating remote repository in github
===============
1. create an account in github.com
	URL: https://github.com

2. login github.com with your credentials. 	
	click on "new" --> give a name "flipkart-ecomerce" --> "create reopository" 

3. copy the repo URL from Github:
	https://github.com/nageshvkn/flipkart-ecomerce.git

4. Clone the source code from remote repository using 'git clone' command
	git clone https://github.com/nageshvkn/flipkart-ecomerce.git

5. cd "flipkart-ecomerce" and observe ".git" folder. ".git" is called as "Local Reposiotory".

6. Create some sample code and submit the code to remote repo.
	--> touch Login.java
	--> git add Login.java
	--> git commit Login.java -m "login module code" [when you commit first time it asks for username and email. Set it up using below steps under "Setting up mandatory configurations" SECTION]
	--> git push  --> [refer below topic [Setting up token/password] to generate token or password]

	--> git log Login.java (check the history of the file)

7. After this, you can clone your repository in another directory and check if you get Login.java as your repository has a file now.


#
Setting up token/password to access GitHub
========================================
1. go to https://github.com

2. Generate token from github
click on user-profile icon (top right) .. click on 'settings' .. click on 'Developer settings' .. click on 'Personal access tokens' .. click on 'Generate new token' .. give a name under 'Note' (example:class) .. select 'No expiration' from 'Expiration' drop-down box .. click on 'repo' check box under 'Select scopes' .. and finally click on 'Generate token' button.

3. Store the token in your machine using below command
$ git remote set-url origin https://nageshvkn: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@github.com/nageshvkn/wiculty33.git

Note: in the above command
- 'nageshvkn' is your GitHub user-name.
- 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 IS your token generated from GitHub.
- github.com/nageshvkn/wiculty29.git is your repository path. don't give 'https'


Note: If you want to store your Git credentials, use below command
$ git config --global credential.helper store


#
Setting up mandatory configurations:
=============================================
$ git config --global user.name "Nageswara Rao P"
$ git config --global user.email "nageshvkn@gmail.com"

Check the configurations using below command
$ git config --list

Git stores all configurations in below file
"$USER_HOME/.gitconfig"


*** pending ***
#
Staging Index/Stage

- Skip staging
	$ git commit -am "submit all pending changes"

Note: If you want to skip the staging, you need to commit all pending changes.
      For new file, you have to go through the 'stage' process.
*** pending ***


# Show all the files that are modified as part of a commit (with content)
git show <Commit Id>
git show b85a6e123

#
- Git Commit structure
	SHA value / commit ID
	User & email
	Date & time stamp
	Commit message

# Understand Git Jargon.
	- Remote Repository
	- Working Directory
	- Local Repository
	- Stage/"Staging Index"
	- SHA/Commit ID


*
# History
	$ git log Login.java
	$ git log

- Filter the commits based on the user name
git log --author "Sally" 

- Filter the commit based on commit message
git log --grep "123"

- Qn: show me all the commits made by user Sally and has bug-123 in commit message
git log --author "Sally" --grep "bug-123"



# GIT Commands
1.  
# See the content change of a file which is in 'source' area
$ git diff Login.java

# See the content change of a file which is in 'stage' area
$ git diff --staged Login.java

# See the content change of a file after the commit
$ git show 123abc456


2. Deleting a file

        A.) git rm OMS.java
	    git commit OMS.java -m "comment"
	    git push

 
3. Renaming a file/folder
	A.) git mv Login.java Login1.java
	    git commit -m "rename Login"
	    git push		
Note:
Git will carry the history of old file to new file. To check complete history..
	$ git log --follow Login1.java


-----

# Undoing the changes:
Unstage the changes from STAGE area
	$ git restore --staged LoginWeb.java

# Revert the changes from the Source area
	$ git restore Login.java
	
Note: Once the changes are removed from source area, you can't get those changes back. So, better you take a backup of the file before you apply 'git restore' command.


# BRANCHING
	A. What is a branch?
	B. Why and When we create a branch?
	C. Branching Strategies


# List all active branches in local repository
	$ git branch
	
# Creating a new branch
	$ git branch dev_1.2.3

# Push new branch to remote repository
	$ git push origin dev_1.2.3
		
# Switching from one branch to another
	$ git checkout dev_1.2.3

# Creating and switching to a newly created branch
	$ git checkout -b dev_1.2.4

**
# How do you clone a remote repository with a particular branch as default
	$ git clone -b dev_1.2.4 https://github.com/nageshvkn/flipkart899.git

# List all remote branches
	$ git branch -r
	
# Deleting a branch
        $ git branch -d dev_1.2.3
        $ git push -d origin dev_1.2.3       


MERGING:
=============

To practice merge, we need to make sure that repository files are in conflict situation.

# Preparing the repository to produce conflict situation.

1. Take a file from master ex: Login.java. Add some code as shown below.
Login.java
--
ublic class Login {
public static void main() {
    int i;

    for(i=0;i<=10;i++){
        System.out.println("Number: " + i);
    }
}
}

2. Create a new branch using $ git branch dev-1.2.5.
   Push it to remote repository using $ git push origin dev-1.2.5.

After creating this dev-1.2.5 branch, you see the same code in both branches Login.java file.

3. Like a developer, modify 5th line from i<=10 TO i<=20 Login.java file of dev-1.2.5 branch. 

4. Similarly, modify 5th line from i<=10 TO i<=30 in Login.java file of master branch.

5 Activate source branch i.e dev-1.2.5 using $ git checkout dev-1.2.5

6. Make sure that you are on master branch (Run $git checkout master) to be on the master.

# You have master code now. Now merge the changes from dev_1.2.5 to master by running below command. 
Git merge command merges the changes from dev_1.2.5 to master.

	$ git merge dev_1.2.5

# Run git status command to list conflict file

#
  Resolve the conflict be removing conflict markers (i.e <<, >> & == symbols)and commit the merge

# Run git push command to move the merge to Remote.


# What is Conflict:
If two users modify the same file in source and target branches and if the same line has different content, git can't decide which user's code it has to take. we call this situation as conflict.

# How do you resolve the conflict: 
- Open the conflict file--> remove conflict markers--> select the right content 
  based on the discussion with developers
- git add
- git commit (after compilation and some z sanity testing)
- git push

Note:
Use below command to find the owner of conflict code. How do you find the user who modified/added conflicted code?
	$ git blame Login.java

#
REBASE:
========


#
git reset & revert command - Nagesh to come up with an example


# GIT STASH
- Modify some file example: LoginUser.java in Master branch. Don't commit.
- Try to switch to example: dev-1.2.5 branch. You can't switch as it will overwrite Master branches LoginUser.java
- Now, in order to switch to the dev-1.2.5 branch, you need to stash all your changes (stash meaning, archive the changes in some temp directory)
- Now run $ git checkout dev-1.2.5 (you will be able to switch now.). Finish your work in dev-1.2.5 and commit your changes.
- Now you can resume with your work in Master branch by bringing stashed changes back.
- First, switch to master branch and run below command to unstash the changes.
- $ git stash pop
- You can stash multiple changes. And If you want to see all changes in the stash, use below command
 $ git stash list
- If you want to pop a particular stashed item from the list, use below command
 $ git stash pop 0 (git stash list command shows all the stashed changes with numbers like 0,1,2 .etc.) 


# .gitignore Concept


#	
git remote
	PULL
	FETCH
	
	PUSH
	CLONE

======
1. Merge, Rebase & cherry-pick - Nagesh to come up with an example
2. git reset & revert command - Nagesh to come up with an example
3. Git fetch - understand better.

